{"version":3,"sources":["app.js"],"names":["console","angular","module","directive","state","width","height","value","i","j","isWinner","isWon","checkForWin","this","checkHorizontal","y","x","expected","winningLine","length","push","setWinner","bind","checkVertical","checkDiagonal","who","line","winner","forEach","coords","GameBoardController","nextMark","gameState","mark","log","bindings","restrict","templateUrl","controller","controllerAs","bindToController"],"mappings":"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","file":"app.min.js","sourcesContent":["'use strict';\n\nvar console = console || null;\n\n// @TODO Try out magic square method of checking if puzzle is solved\n\nangular\n    .module('ticTacToe', [])\n    .directive('tttGameBoard', [function() {\n\n        function state(width, height, value) {\n            value = value || null;\n            var state=[], i, j;\n\n            for(i=0; i<width; i++) {\n                state[i]=[];\n                for(j=0; j<height; j++) {\n                    //state[i][j]=value;\n                    state[i][j]={\n                        value: value,\n                        isWinner: false\n                    };\n                }\n            }\n            return {\n                state: state,\n                isWon: false,\n                checkForWin: function() {\n                    var state = this.state,\n                        checkHorizontal = function() {\n                        var y, x,\n                            expected,\n                            winningLine;\n                        for( y=0; y<state.length; y++ ) {\n                            expected = state[y][0].value;\n                            if( expected===null ) continue;\n                            winningLine = [[y, 0]];\n                            for( x=1; x<state[y].length; x++ ) {\n                                if ( state[y][x].value!==expected ) {\n                                    winningLine = null;\n                                    break;\n                                } else {\n                                    winningLine.push([y, x]);\n                                }\n                            }\n                            if( winningLine!==null ) {\n                                this.setWinner(expected, winningLine);\n                                return true;\n                            }\n                        }\n                        return false;\n                    }.bind(this),\n                    checkVertical = function() {\n                        var y, x,\n                            expected,\n                            winningLine;\n                        for( x=0; x<state[0].length; x++ ) {\n                            expected = state[0][x].value;\n                            if( expected===null ) continue;\n                            winningLine = [[0,x]];\n                            for( y=1; y<state.length; y++ ) {\n                                if ( state[y][x].value!==expected ) {\n                                    winningLine = null;\n                                    break;\n                                } else winningLine.push([y,x]);\n                            }\n                            if( winningLine!==null ) {\n                                this.setWinner(expected, winningLine);\n                                return true;\n                            }\n                        }\n                        return false;\n                    }.bind(this),\n                    checkDiagonal = function() {\n                        var y=1, x=1,\n                            expected=state[0][0].value,\n                            winningLine;\n\n                        if( expected!==null ) {\n                            winningLine = [[0,0]];\n                            while(y<state.length && x<state[y].length) {\n                                if( expected!==state[y][x].value ) {\n                                    winningLine = null;\n                                    break;\n                                } else winningLine.push([y, x]);\n                                x++; y++;\n                            }\n                            if( winningLine!==null ) {\n                                this.setWinner(expected, winningLine);\n                                return true;\n                            }\n                        }\n\n                        x = 1, y = state.length-1;\n                        expected=state[y][0].value;\n                        winningLine = [[y, 0]];\n                        y--; \n                        if( expected!==null ) {\n                            while(y>=0 && x<state[y].length) {\n                                if( expected!==state[y][x].value ) {\n                                    winningLine = null;\n                                    break;\n                                } else winningLine.push([y, x]);\n                                x++; y--;\n                            }\n                            if( winningLine!==null ) {\n                                this.setWinner(expected, winningLine);\n                                return true;\n                            }\n                        }\n                        return false;\n                    }.bind(this);\n\n                    if( checkHorizontal() || checkVertical() || checkDiagonal() ) {\n                        this.isWon = true;\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n                setWinner:  function(who, line) {\n                    this.winner = who;\n                    line.forEach(function(coords) {\n                        var x, y;\n                        y = coords[0];\n                        x = coords[1];\n                        this.state[y][x].isWinner = true;\n                    }, this);\n                }\n            };\n        }\n\n\n\n//        var template = '',\n        var\n        AIs = {\n            // https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy\n            wikipedia: function(state, type) {\n                var strategies = [function win(state) {\n                    \n                },\n                                  function block(state) {\n                                      \n                                  }];\n            \n            },\n            // http://www.flyingmachinestudios.com/programming/minimax/\n            // http://aihorizon.com/essays/basiccs/trees/minimax.htm\n            // https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy\n            minimax: function(state, type) {\n                \n            }\n        },\n        GameBoardController = [function() {\n            // x always first\n            var //self = this,\n                nextMark = 'X';\n\n            this.gameState = state(3, 3, null);\n\n\n            this.mark = function(x, y) {\n                console.log(this.gameState.state[x][y]); // eslint-disable-line no-console\n                if( !this.gameState.isWon && this.gameState.state[x][y].value===null) {\n                    this.gameState.state[x][y].value = nextMark;\n                    nextMark = nextMark==='X' ? 'O' : 'X';\n                    if( this.gameState.checkForWin() ) {\n                        console.log('Won'); // eslint-disable-line no-console\n                    }\n                }\n            };\n        }],\n\n        bindings = {}; \n\n        return {\n            restrict: 'E',\n            //            template: template\n            templateUrl: 'gameboard.html',\n            controller: GameBoardController,\n            controllerAs: 'c',\n            bindToController: bindings\n        };\n    }]);\n\n"],"sourceRoot":"/source/"}